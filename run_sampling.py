import osimport numpy as npimport pandas as pdimport argparseimport matplotlibmatplotlib.use('Agg')import logginglogging.basicConfig(level=logging.DEBUG)from collections import OrderedDictfrom utils import verify_input_files, summarize_inputs, check_sainity, run_sampling, extract_taxa_and_covariates,\    tsv_file, nonexistant_filedef compute_beta_statistics(beta, taxa, covariates, percentiles=[5, 95]):    def convert_to_df(values):        return pd.DataFrame(data=values, index=covariates, columns=taxa).T    sheets = OrderedDict()    sheets['beta_mean'] = convert_to_df(beta.mean(axis=0))    sheets['beta_sd'] = convert_to_df(beta.std(axis=0))    percentile_05, percentile_95 = np.percentile(beta, percentiles, axis=0)    sheets['beta_05-percentile'] = convert_to_df(percentile_05)    sheets['beta_95-percentile'] = convert_to_df(percentile_95)    sheets['beta_select'] = convert_to_df(~((percentile_05 < 0) & (0 < percentile_95)))    sheets['beta_mean-selected'] = sheets['beta_mean'].copy()    sheets['beta_mean-selected'][~sheets['beta_select']] = 0    return sheetsdef generate_excel_summary(trace, taxa, covariates, outputfile):    # beta trace has shape (#iterations, #covariates, #OTUs)    beta = trace['beta']    sheets = compute_beta_statistics(beta, taxa, covariates)    with pd.ExcelWriter(outputfile, engine='xlsxwriter') as excelfile:        for sheet, data in sheets.items():            data.to_excel(excelfile, sheet_name=sheet)def generate_outputs(model, trace, taxa, covariates, output, traceplot, save_model, save_trace):    import pickle    os.makedirs(output, exist_ok=True)    generate_excel_summary(trace, taxa, covariates, os.path.join(output, 'variable_statistics.xlsx'))    if save_trace:        with open(os.path.join(output, 'trace.pck'), 'wb') as f:            pickle.dump(trace, f, pickle.HIGHEST_PROTOCOL)    if save_model:        with open(os.path.join(output, 'model.pck'), 'wb') as f:            pickle.dump(model, f, pickle.HIGHEST_PROTOCOL)    if traceplot:        import matplotlib.pyplot as plt        import pymc3 as pm        pm.traceplot(trace, varnames=['alpha', 'beta', 'tau'])        plt.savefig(os.path.join(output, 'traceplot.pdf'))        plt.close('all')def center_and_standardize_columns(data):    return (data - data.mean(axis=0))/data.std(axis=0)def run_inference(countdata, metadata, estimated_covariates, output, sampling_options, output_options):    verify_input_files(countdata, metadata)    summarize_inputs(countdata, metadata, estimated_covariates)    check_sainity(countdata, metadata)    metadata = center_and_standardize_columns(metadata)    model, trace = run_sampling(countdata, metadata, estimated_covariates, **sampling_options)    taxa, covariates = extract_taxa_and_covariates(countdata, metadata)    generate_outputs(model, trace, taxa, covariates, output, **output_options)def get_parameter_directories(args):    required_options = {'countdata': args.countdata, 'metadata': args.metadata,                        'estimated_covariates': args.estimated_covariates, 'output':args.output}    sampling_options = {'n_chains': args.n_chains, 'n_tune':args.n_tune, 'n_draws':args.n_draws, 'seed': args.seed}    output_options = {'traceplot': args.traceplot, 'save_model': args.save_model, 'save_trace':args.save_trace}    return required_options, sampling_options, output_optionsif __name__ == '__main__':    parser = argparse.ArgumentParser()    parser.add_argument('countdata', type=tsv_file)    parser.add_argument('metadata', type=tsv_file)    parser.add_argument('--estimated_covariates', type=int, required=True)    parser.add_argument('-o', '--output', required=True, type=nonexistant_file)    sampling_group = parser.add_argument_group('Sampling options')    sampling_group.add_argument('--n_chains', type=int, default=4)    sampling_group.add_argument('--n_tune', type=int, default=2000)    sampling_group.add_argument('--n_draws', type=int, default=2000)    sampling_group.add_argument('--seed', type=int, default=-1)    output_group = parser.add_argument_group('Output options')    output_group.add_argument('--traceplot', action='store_true', default=False)    output_group.add_argument('--save_model', action='store_true', default=False)    output_group.add_argument('--save_trace', action='store_true', default=False)    args = parser.parse_args()    required_options, sampling_options, output_options = get_parameter_directories(args)    run_inference(**required_options, sampling_options=sampling_options, output_options=output_options)